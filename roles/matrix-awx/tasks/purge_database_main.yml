
- name: Ensure dateutils and curl is installed in AWX
  delegate_to: 127.0.0.1
  yum:
    name: dateutils
    state: latest

- name: Ensure dateutils, curl and jq intalled on target machine
  apt:
    pkg:
    - curl
    - jq
    state: present

- name: Include vars in matrix_vars.yml
  include_vars:
    file: '/var/lib/awx/projects/clients/{{ member_id }}/{{ subscription_id }}/matrix_vars.yml'
  no_log: True

- name: Collect before shrink size of Synapse database
  shell: du -sh /matrix/postgres/data
  register: db_size_before_stat
  when: (purge_mode.find("Perform final shrink") != -1)
  no_log: True

- name: Print before size of Synapse database
  debug:
    msg: "{{ db_size_before_stat.stdout.split('\n') }}"
  when: (db_size_before_stat is defined) and (purge_mode.find("Perform final shrink") != -1)

- name: Collect the internal IP of the matrix-synapse container
  shell: "/usr/bin/docker inspect --format '{''{range.NetworkSettings.Networks}''}{''{.IPAddress}''}{''{end}''}' matrix-synapse"
  register: synapse_container_ip

- name: Collect access token for janitor user
  shell: |
    curl -X POST -d '{"type":"m.login.password", "user":"janitor", "password":"{{ matrix_awx_janitor_user_password }}"}' "{{ synapse_container_ip.stdout }}:8008/_matrix/client/r0/login" | jq '.access_token'
  register: janitors_token
  no_log: True

- name: Collect total number of rooms
  shell: |
    curl -X GET --header "Authorization: Bearer {{ janitors_token.stdout[1:-1] }}" '{{ synapse_container_ip.stdout }}:8008/_synapse/admin/v1/rooms' | jq '.total_rooms'
  when: (purge_mode.find("No local users [recommended]") != -1) or (purge_mode.find("Number of users [slower]") != -1) or (purge_mode.find("Number of events [slower]") != -1)
  register: rooms_total

- name: Print total number of rooms
  debug:
    msg: '{{ rooms_total.stdout }}'
  when: (purge_mode.find("No local users [recommended]") != -1) or (purge_mode.find("Number of users [slower]") != -1) or (purge_mode.find("Number of events [slower]") != -1)

- name: Calculate every 100 values for total number of rooms
  delegate_to: 127.0.0.1
  shell: |
    seq 0 100 {{ rooms_total.stdout }}
  when: (purge_mode.find("No local users [recommended]") != -1) or (purge_mode.find("Number of users [slower]") != -1) or (purge_mode.find("Number of events [slower]") != -1)
  register: every_100_rooms

- name: Ensure room_list_complete.json file exists
  delegate_to: 127.0.0.1
  file:
    path: /tmp/{{ subscription_id }}_room_list_complete.json
    state: touch
  when: (purge_mode.find("No local users [recommended]") != -1) or (purge_mode.find("Number of users [slower]") != -1) or (purge_mode.find("Number of events [slower]") != -1)

- name: Build file with total room list
  include_tasks: purge_database_build_list.yml 
  loop: "{{ every_100_rooms.stdout_lines | flatten(levels=1) }}"
  when: (purge_mode.find("No local users [recommended]") != -1) or (purge_mode.find("Number of users [slower]") != -1) or (purge_mode.find("Number of events [slower]") != -1)

- name: Generate list of rooms with no local users
  delegate_to: 127.0.0.1
  shell: |
    jq 'try .rooms[] | select(.joined_local_members == 0) | .room_id' < /tmp/{{ subscription_id }}_room_list_complete.json > /tmp/{{ subscription_id }}_room_list_no_local_users.txt
  when: (purge_mode.find("No local users [recommended]") != -1) or (purge_mode.find("Number of users [slower]") != -1) or (purge_mode.find("Number of events [slower]") != -1)
  
- name: Count number of rooms with no local users
  delegate_to: 127.0.0.1
  shell: |
    wc -l /tmp/{{ subscription_id }}_room_list_no_local_users.txt | awk '{ print $1 }'
  register: rooms_no_local_total
  when: (purge_mode.find("No local users [recommended]") != -1) or (purge_mode.find("Number of users [slower]") != -1) or (purge_mode.find("Number of events [slower]") != -1)

- name: Setting host fact room_list_no_local_users
  set_fact:
    room_list_no_local_users: "{{ lookup('file', '/tmp/{{ subscription_id }}_room_list_no_local_users.txt') }}"
  no_log: True
  when: (purge_mode.find("No local users [recommended]") != -1) or (purge_mode.find("Number of users [slower]") != -1) or (purge_mode.find("Number of events [slower]") != -1)

- name: Purge all rooms with no local users
  include_tasks: purge_database_no_local.yml 
  loop: "{{ room_list_no_local_users.splitlines() | flatten(levels=1) }}"
  when: (purge_mode.find("No local users [recommended]") != -1) or (purge_mode.find("Number of users [slower]") != -1) or (purge_mode.find("Number of events [slower]") != -1)

- name: Collect epoche time from date
  delegate_to: 127.0.0.1
  shell: |
    date -d '{{ purge_date }}' +"%s"
  when: (purge_mode.find("Number of users [slower]") != -1) or (purge_mode.find("Number of events [slower]") != -1)
  register: purge_epoche_time

- name: Generate list of rooms with more then N users
  delegate_to: 127.0.0.1
  shell: |
    jq 'try .rooms[] | select(.joined_members > {{ purge_metric_value }}) | .room_id' < /tmp/{{ subscription_id }}_room_list_complete.json > /tmp/{{ subscription_id }}_room_list_joined_members.txt
  when: purge_mode.find("Number of users [slower]") != -1

- name: Count number of rooms with more then N users
  delegate_to: 127.0.0.1
  shell: |
    wc -l /tmp/{{ subscription_id }}_room_list_joined_members.txt | awk '{ print $1 }'
  register: rooms_join_members_total
  when: purge_mode.find("Number of users [slower]") != -1

- name: Setting host fact room_list_joined_members
  delegate_to: 127.0.0.1
  set_fact:
    room_list_joined_members: "{{ lookup('file', '/tmp/{{ subscription_id }}_room_list_joined_members.txt') }}"
  when: purge_mode.find("Number of users [slower]") != -1
  no_log: True

- name: Purge all rooms with more then N users
  include_tasks: purge_database_users.yml 
  loop: "{{ room_list_joined_members.splitlines() | flatten(levels=1) }}"
  when: purge_mode.find("Number of users [slower]") != -1

- name: Generate list of rooms with more then N events
  delegate_to: 127.0.0.1
  shell: |
    jq 'try .rooms[] | select(.state_events > {{ purge_metric_value }}) | .room_id' < /tmp/{{ subscription_id }}_room_list_complete.json > /tmp/{{ subscription_id }}_room_list_state_events.txt
  when: purge_mode.find("Number of events [slower]") != -1

- name: Count number of rooms with more then N events
  delegate_to: 127.0.0.1
  shell: |
    wc -l /tmp/{{ subscription_id }}_room_list_state_events.txt | awk '{ print $1 }'
  register: rooms_state_events_total
  when: purge_mode.find("Number of events [slower]") != -1

- name: Setting host fact room_list_state_events
  delegate_to: 127.0.0.1
  set_fact:
    room_list_state_events: "{{ lookup('file', '/tmp/{{ subscription_id }}_room_list_state_events.txt') }}"
  when: purge_mode.find("Number of events [slower]") != -1
  no_log: True

- name: Purge all rooms with more then N events
  include_tasks: purge_database_events.yml 
  loop: "{{ room_list_state_events.splitlines() | flatten(levels=1) }}"
  when: purge_mode.find("Number of events [slower]") != -1

- name: Collect AWX admin token the hard way!
  delegate_to: 127.0.0.1
  shell: |
      curl -sku {{ tower_username }}:{{ tower_password }} -H "Content-Type: application/json" -X POST -d '{"description":"Tower CLI", "application":null, "scope":"write"}' https://{{ tower_host }}/api/v2/users/1/personal_tokens/ | jq '.token' | sed -r 's/\"//g'
  register: tower_token
  no_log: True

#- name: Create a new token using username/password
#  delegate_to: 127.0.0.1
#  awx.awx.tower_token:
#    description: 'AWX_1'
#    scope: "write"
#    state: present
#    tower_username: "{{ tower_username }}"
#    tower_password: "{{ tower_password }}"
#  register: awx_token
#  no_log: True

#- debug:
#    msg: "awx_token.ansible_facts.tower_token.token: {{ awx_token.ansible_facts.tower_token.token }}"
#  ignore_errors: True

- name: Execute rust-synapse-compress-state job template
  delegate_to: 127.0.0.1
  awx.awx.tower_job_launch:
    job_template: "{{ matrix_domain }} - 0 - Deploy/Update a Server"
    tags: "rust-synapse-compress-state"
    wait: yes
    tower_host: "https://{{ tower_host }}"
    tower_oauthtoken: "{{ tower_token.stdout }}"
    validate_certs: yes 
  register: job
  when: (purge_mode.find("No local users [recommended]") != -1) or (purge_mode.find("Number of users [slower]") != -1) or (purge_mode.find("Number of events [slower]") != -1) or (purge_mode.find("Skip purging rooms [faster]") != -1)

#- name: Execute rust-synapse-compress-state job template
#  delegate_to: 127.0.0.1
#  awx.awx.tower_job_launch:
#    job_template: "{{ matrix_domain }} - 0 - Deploy/Update a Server"
#    tags: "rust-synapse-compress-state"
#    wait: yes
#    tower_host: "https://{{ tower_host }}"
#    tower_oauthtoken: "{{ awx_token.ansible_facts.tower_token }}"
#    validate_certs: yes 
#  register: job
#  when: (purge_mode.find("No local users [recommended]") != -1) or (purge_mode.find("Number of users [slower]") != -1) or (purge_mode.find("Number of events [slower]") != -1) or (purge_mode.find("Skip purging rooms [faster]") != -1)
#  ignore_errors: True

#- name: Execute rust-synapse-compress-state job template
#  delegate_to: 127.0.0.1
#  awx.awx.tower_job_launch:
#    job_template: "{{ matrix_domain }} - 0 - Deploy/Update a Server"
#    tags: "rust-synapse-compress-state"
#    wait: yes
#    tower_host: "https://{{ tower_host }}"
#    tower_oauthtoken: "{{ awx_token.ansible_facts.tower_token.token }}"
#    validate_certs: yes 
#  register: job
#  when: (purge_mode.find("No local users [recommended]") != -1) or (purge_mode.find("Number of users [slower]") != -1) or (purge_mode.find("Number of events [slower]") != -1) or (purge_mode.find("Skip purging rooms [faster]") != -1)
#  ignore_errors: True

- name: Stop Synapse service
  shell: systemctl stop matrix-synapse.service
  when: (purge_mode.find("Perform final shrink") != -1)

- name: Re-index Synapse database
  shell: docker exec -i matrix-postgres psql "host=127.0.0.1 port=5432 dbname=synapse user=synapse password={{ matrix_synapse_connection_password }}" -c 'REINDEX (VERBOSE) DATABASE synapse'
  when: (purge_mode.find("Perform final shrink") != -1)

- name: Execute run-postgres-vacuum job template
  delegate_to: 127.0.0.1
  awx.awx.tower_job_launch:
    job_template: "{{ matrix_domain }} - 0 - Deploy/Update a Server"
    tags: "run-postgres-vacuum,start"
    wait: yes
    tower_host: "https://{{ tower_host }}"
    tower_oauthtoken: "{{ tower_token.stdout }}"
    validate_certs: yes 
  register: job
  when: (purge_mode.find("Perform final shrink") != -1)

#- name: Delete our Token using its ID
#  delegate_to: 127.0.0.1
#  awx.awx.tower_token:
#    existing_token_id: "{{ awx_token.ansible_facts.tower_token.id }}"
#    state: absent
#  when: awx_token is defined

- name: Cleanup room_list files
  delegate_to: 127.0.0.1
  shell: |
    rm /tmp/{{ subscription_id }}_room_list*
  when: (purge_mode.find("No local users [recommended]") != -1) or (purge_mode.find("Number of users [slower]") != -1) or (purge_mode.find("Number of events [slower]") != -1)
  ignore_errors: yes

- name: Collect after shrink size of Synapse database
  shell: du -sh /matrix/postgres/data
  register: db_size_after_stat
  when: (purge_mode.find("Perform final shrink") != -1)
  no_log: True

- name: Print total number of rooms processed 
  debug:
    msg: '{{ rooms_total.stdout }}'
  when: (purge_mode.find("No local users [recommended]") != -1) or (purge_mode.find("Number of users [slower]") != -1) or (purge_mode.find("Number of events [slower]") != -1)

- name: Print the number of rooms purged with no local users
  debug:
    msg: '{{ rooms_no_local_total.stdout }}'
  when: (purge_mode.find("No local users [recommended]") != -1) or (purge_mode.find("Number of users [slower]") != -1) or (purge_mode.find("Number of events [slower]") != -1)

- name: Print the number of rooms purged with more then N users
  debug:
    msg: '{{ rooms_join_members_total.stdout }}'
  when: purge_mode.find("Number of users") != -1

- name: Print the number of rooms purged with more then N events
  debug:
    msg: '{{ rooms_state_events_total.stdout }}'
  when: purge_mode.find("Number of events") != -1

- name: Print before purge size of Synapse database
  debug:
    msg: "{{ db_size_before_stat.stdout.split('\n') }}"
  when: (db_size_before_stat is defined) and (purge_mode.find("Perform final shrink") != -1)

- name: Print after purge size of Synapse database
  debug:
    msg: "{{ db_size_after_stat.stdout.split('\n') }}"
  when: (db_size_after_stat is defined) and (purge_mode.find("Perform final shrink") != -1)

- name: Set boolean value to exit playbook
  set_fact:
    end_playbook: true

- name: End playbook early if this task is called.
  meta: end_play
  when: end_playbook is defined and end_playbook|bool
